import { item_type } from '#types';
import { InteractionTemplate } from '@/config/templates';
import { MongoClient } from '@/Main';
import { discharge, handle_error } from '@/tools';
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  Channel,
  Colors,
  CommandInteraction,
  EmbedBuilder,
  GuildMember,
  InteractionCollector,
  Message,
  MessageComponentInteraction,
  ModalBuilder,
  ModalSubmitInteraction,
  Role,
  SelectMenuBuilder,
  SelectMenuInteraction,
  SelectMenuOptionBuilder,
  TextInputBuilder,
  TextInputStyle,
} from 'discord.js';
import parse from 'parse-duration';

const max_price_value = 10e8;
const min_price_value = 100;

type actions_values =
  | 'name'
  | 'description'
  | 'price'
  | 'role'
  | 'buy_message'
  | 'use_message'
  | 'save';

const Actions: Record<actions_values, string> = {
  name: 'name',
  description: 'description',
  price: 'price',
  role: 'role',
  buy_message: 'buy_message',
  use_message: 'use_message',
  save: 'save',
};

const ActionsEmojis: Record<actions_values, string> = {
  name: '‚úèÔ∏è',
  description: 'üìì',
  price: 'üí∏',
  buy_message: 'üõçÔ∏è',
  role: 'üßø',
  use_message: '‚öôÔ∏è',
  save: '‚úÖ',
};
type other_text_values = 'buy_message' | 'use_message';

export class ItemsEditor {
  interaction: CommandInteraction;

  private _item: item_type | null = null;
  private _menu_message: Message | null = null;
  private _collector: InteractionCollector<
    ButtonInteraction | SelectMenuInteraction
  > | null = null;

  private _template: InteractionTemplate;

  constructor(interaction: CommandInteraction, item: item_type) {
    this._item = item;
    this.interaction = interaction;

    this._template = new InteractionTemplate(interaction);
    this.execute();
  }

  async execute() {
    if (!this._item) throw new Error("Item isn't defined");

    await this._show_result();

    this._create_collector();
  }

  private async _show_result() {
    if (!this._item) return;
    const {
      price,
      name,
      buy_message,
      description,
      role,
      use_message,
      buy_message_channel,
      use_message_channel,
    } = this._item;

    const currency = await this._template.guild_settings.currency_icon();

    const save_button = new ButtonBuilder()
      .setLabel('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç')
      .setEmoji('‚úÖ')
      .setCustomId(Actions.save)
      .setStyle(ButtonStyle.Success);

    const action_options = [
      new SelectMenuOptionBuilder()
        .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ')
        .setEmoji(ActionsEmojis.name)
        .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞')
        .setValue(Actions.name),
      new SelectMenuOptionBuilder()
        .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ')
        .setEmoji(ActionsEmojis.description)
        .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞')
        .setValue(Actions.description),
      new SelectMenuOptionBuilder()
        .setLabel('–¶–µ–Ω–∞')
        .setEmoji(ActionsEmojis.price)
        .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞')
        .setValue(Actions.price),
      new SelectMenuOptionBuilder()
        .setLabel('–†–æ–ª—å')
        .setEmoji(ActionsEmojis.role)
        .setDescription(
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å, –≤—ã–¥–∞—é—â—É—é—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞'
        )
        .setValue(Actions.role),
      new SelectMenuOptionBuilder()
        .setLabel('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ')
        .setEmoji(ActionsEmojis.buy_message)
        .setDescription(
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–µ–µ—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ'
        )
        .setValue(Actions.buy_message),
      new SelectMenuOptionBuilder()
        .setLabel('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏')
        .setEmoji(ActionsEmojis.use_message)
        .setDescription(
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–µ–µ—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ'
        )
        .setValue(Actions.use_message),
    ];

    const actions_menu = new SelectMenuBuilder()
      .setPlaceholder('‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ...')
      .setCustomId('actions_menu')
      .setMaxValues(1)
      .setMinValues(1)
      .addOptions(...action_options);

    const actions_row = [
      new ActionRowBuilder().addComponents(actions_menu),
      new ActionRowBuilder().addComponents(save_button),
    ];
    let result_overwiew = `> –ù–∞–∑–≤–∞–Ω–∏–µ: \`${name}\`\n> –¶–µ–Ω–∞: ${discharge(
      price
    )}${currency}\n`;

    if (role) result_overwiew += `> –†–æ–ª—å: <@&${role}>\n`;

    if (description)
      result_overwiew += `> –û–ø–∏—Å–∞–Ω–∏–µ: ${this._validate_string(description)}\n`;

    if (buy_message && buy_message_channel)
      result_overwiew += `> –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: ${this._validate_string(
        buy_message
      )}\n> –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ –ø–æ–∫—É–ø–∫–µ: <#${buy_message_channel}>\n`;

    if (use_message && use_message_channel)
      result_overwiew += `> –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: ${this._validate_string(
        use_message
      )}\n> –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ –ø–æ–∫—É–ø–∫–µ: <#${use_message_channel}>\n`;

    const embed = new EmbedBuilder()
      .setTitle('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:')
      .setDescription(
        `${result_overwiew}\n\n*–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–Ω–∏–∑—É*`
      )
      .setFooter({
        text: this.interaction.user.tag,
        iconURL: (this.interaction.member as GuildMember).displayAvatarURL(),
      })
      .setColor(Colors.Yellow);

    if (this._menu_message)
      this._menu_message.edit({
        embeds: [embed],
        components: actions_row as any,
      });
    else
      this._menu_message = await this._template.send({
        embeds: [embed],
        components: actions_row as any,
      });
  }

  private async _create_collector() {
    if (!this._menu_message) return;

    const filter = (inter: ButtonInteraction | SelectMenuInteraction) =>
      inter.user.id === this.interaction.user.id;

    this._collector = this._menu_message.createMessageComponentCollector({
      filter,
      time: parse('10m'),
    });

    this._collector.on('collect', this._check_action.bind(this));
    this._collector.on('collect', this._check_save.bind(this));

    this._collector.on('end', this._destroy.bind(this));
  }

  private async _destroy() {
    this._menu_message?.edit({ components: [] });
  }

  private async _check_action(inter: MessageComponentInteraction) {
    if (!inter.isSelectMenu()) return;

    await this._menu_message?.edit({
      components: inter.message.components,
    });

    const select_value = inter.values[0] as other_text_values;

    try {
      switch (select_value) {
        case Actions.name:
          this._set_name(inter);
          break;
        case Actions.price:
          this._set_price(inter);
          break;
        case Actions.description:
          this._set_decription(inter);
          break;
        case Actions.role:
          this._set_role(inter);
          break;
        default:
          const other_values: other_text_values[] = [
            'buy_message',
            'use_message',
          ];
          if (other_values.includes(select_value))
            this._set_other_text_values(inter);
      }
    } catch (err) {
      handle_error(err as Error, '/-command create-item: _check_action');
    }
  }

  private async _check_save(inter: MessageComponentInteraction) {
    if (!this._item) return;
    if (!inter.isButton() || inter.customId != Actions.save) return;
    const { name, price } = this._item;

    if (!name || !price) return;

    await this._create_item();

    this._collector?.stop();

    await inter.update({
      components: [],
    });
  }

  private async _create_item() {
    if (!this._item) return;
    const db = MongoClient.db(this.interaction.guildId!);
    const collection = db.collection('Shop');
    const { name, price } = this._item;
    const currency = await this._template.guild_settings.currency_icon();

    if (this._item._id) {
      collection.updateOne(
        {
          _id: this._item._id,
        },
        {
          $set: this._item,
        }
      );
      this._template.replyTrue(
        `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç \`${name}\``
      );
    } else {
      collection.insertOne(this._item);

      this._template.replyTrue(
        `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç \`${name}\` –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –µ–º—É —Ü–µ–Ω—É ${discharge(
          price
        )}${currency}`
      );
    }
  }

  private _check_price(price: number) {
    return (
      !isNaN(price) && price >= min_price_value && price <= max_price_value
    );
  }

  private _check_string(
    str: string,
    min_length: number = 5,
    max_length: number = 30
  ) {
    return (
      !!str &&
      str.length != 0 &&
      str.length >= min_length &&
      str.length <= max_length
    );
  }

  private _validate_string(str: string) {
    const validated = str
      .trim()
      .split(/\n/)
      .map((s) => `\n> ${s}`)
      .join(' ');
    return `\`\`\`${validated}\`\`\``;
  }
  private reply_false(modal: ModalSubmitInteraction, content: string) {
    const embed = this._template.get_false(content);

    modal.reply({
      embeds: [embed],
      ephemeral: true,
    });
  }

  private async _set_name(select: SelectMenuInteraction) {
    try {
      if (!this._item) return;
      const modal = new ModalBuilder()
        .setCustomId('set_name_modal')
        .setTitle('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞');

      const input_field = new TextInputBuilder()
        .setLabel('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞...')
        .setCustomId('set_name')
        .setMaxLength(30)
        .setMinLength(5)
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const row = new ActionRowBuilder<TextInputBuilder>().addComponents(
        input_field
      );

      modal.addComponents(row);
      await select.showModal(modal);

      const modal_result = await select
        .awaitModalSubmit({
          time: 180000,
          filter: (submit) => submit.user.id === this.interaction.user.id,
        })
        .catch(() => undefined);

      if (!modal_result) return;

      const result_field = modal_result.fields.fields.get('set_name');

      if (!result_field) return;
      const new_name =
        result_field.type === 4 ? result_field.value.trim() : undefined;

      if (!new_name || !this._check_string(new_name)) return;

      modal_result.reply({
        content: '–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞',
        ephemeral: true,
      });

      this._item.name = new_name;

      await this._show_result();
    } catch (err) {
      throw err;
    }
  }

  private async _set_price(select: SelectMenuInteraction) {
    try {
      if (!this._item) return;
      const currency = await this._template.guild_settings.currency_icon();

      const modal = new ModalBuilder()
        .setCustomId('set_price_modal')
        .setTitle('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞');

      const input_field = new TextInputBuilder()
        .setLabel('üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞...')
        .setCustomId('set_price')
        .setMaxLength(10)
        .setMinLength(3)
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const row = new ActionRowBuilder<TextInputBuilder>().addComponents(
        input_field
      );

      modal.addComponents(row);
      await select
        .showModal(modal)
        .catch((e) => handle_error(e, '[ItemsEditor] _set_price'));

      const modal_result = await select
        .awaitModalSubmit({
          time: 180000,
          filter: (submit) => submit.user.id === this.interaction.user.id,
        })
        .catch(() => undefined);

      if (!modal_result) return;

      const result_field = modal_result.fields.fields.get('set_price');
      if (!result_field) return;

      const new_price =
        result_field.type === 4
          ? Math.floor(Number(result_field.value))
          : undefined;

      if (!new_price || !this._check_price(new_price))
        return this.reply_false(
          modal_result,
          `–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ª–µ–∂–∞—â–∏–º –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç ${discharge(
            min_price_value
          )} –¥–æ ${discharge(max_price_value)} ${currency}*`
        );
      modal_result.reply({
        content: '–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞',
        ephemeral: true,
      });

      this._item.price = new_price;

      await this._show_result();
    } catch (err) {
      throw err;
    }
  }

  private async _set_decription(select: SelectMenuInteraction) {
    try {
      if (!this._item) return;

      const modal = new ModalBuilder()
        .setCustomId('set_description_modal')
        .setTitle('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞');

      const input_field = new TextInputBuilder()
        .setLabel(`${ActionsEmojis.description} –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ `)
        .setCustomId(`set_description`)
        .setMaxLength(100)
        .setMinLength(5)
        .setStyle(TextInputStyle.Paragraph)
        .setRequired(true)
        .setPlaceholder(
          '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ "–ø—É—Å—Ç–æ" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º'
        );

      const row = new ActionRowBuilder<TextInputBuilder>().addComponents(
        input_field
      );

      modal.addComponents(row);
      await select.showModal(modal);

      const modal_result = await select
        .awaitModalSubmit({
          time: 180000,
          filter: (submit) => submit.user.id === this.interaction.user.id,
        })
        .catch(() => undefined);

      if (!modal_result) return;

      const result_field = modal_result.fields.fields.get(`set_description`);

      if (!result_field) return;

      const new_decription =
        result_field.type === 4 ? result_field.value.trim() : undefined;

      if (!new_decription) return;

      if (new_decription === '–ø—É—Å—Ç–æ') {
        this._item.description = undefined;

        modal_result.reply({
          content: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞`,
          ephemeral: true,
        });
      } else {
        this._item.description = new_decription;

        modal_result.reply({
          content: `–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞`,
          ephemeral: true,
        });
      }

      await this._show_result();
    } catch (err) {
      throw err;
    }
  }

  private async _set_role(select: SelectMenuInteraction) {
    try {
      if (!this._item) return;

      await select.reply({
        content: `${ActionsEmojis.role} –£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—É—Å—Ç–æ" —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ:`,
        ephemeral: true,
      });

      const answer_role = await this.interaction.channel
        ?.awaitMessages({
          filter: (message) => message.author.id === this.interaction.user.id,
          max: 1,
        })
        .catch(() => undefined);
      const answer = answer_role?.first();

      if (!answer_role || !answer) return;

      answer.delete();

      if (answer.content === '–ø—É—Å—Ç–æ') {
        select.editReply({
          content: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª–µ —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞`,
        });

        this._item.role = undefined;
        await this._show_result();

        return;
      }

      let role = answer.mentions.roles.first();

      if (!role)
        role = (await this.interaction.guild?.channels
          .fetch(answer.content.trim())
          .catch(() => undefined)) as Role | undefined;

      if (!role) return;

      if (
        role.position >=
        this.interaction.guild?.members.me?.roles.highest.position!
      ) {
        return select.editReply({
          content: `–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é`,
        });
      }

      this._item.role = role?.id;

      select.editReply({
        content: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–∫–∞–∑–∞–ª–∏ ${role} —Ä–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏`,
      });

      await this._show_result();
    } catch (err) {
      throw err;
    }
  }

  private async _set_other_text_values(select: SelectMenuInteraction) {
    try {
      if (!this._item) return;
      const select_value = select.values[0] as other_text_values;

      const values_text: Partial<Record<actions_values, string>> = {
        use_message:
          'üßø –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞',
        buy_message:
          'üõçÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞',
      };

      const modal = new ModalBuilder()
        .setCustomId('set_text_modal')
        .setTitle('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');

      const input_field = new TextInputBuilder()
        .setLabel(
          `${ActionsEmojis[select_value]} –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è...`
        )
        .setCustomId(`set_${select_value}`)
        .setMaxLength(100)
        .setMinLength(5)
        .setStyle(TextInputStyle.Paragraph)
        .setRequired(true)
        .setPlaceholder(
          '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ "–ø—É—Å—Ç–æ" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º'
        );

      const row = new ActionRowBuilder<TextInputBuilder>().addComponents(
        input_field
      );

      modal.addComponents(row);
      await select.showModal(modal);

      const modal_result = await select
        .awaitModalSubmit({
          time: 180000,
          filter: (submit) => submit.user.id === this.interaction.user.id,
        })
        .catch(() => undefined);

      if (!modal_result) return;

      const result_field = modal_result.fields.fields.get(
        `set_${select_value}`
      );

      if (!result_field) return;
      const new_value =
        result_field.type === 4 ? result_field.value.trim() : undefined;

      if (new_value === '–ø—É—Å—Ç–æ') {
        this._item[select_value] = undefined;
        this._show_result();

        modal_result.reply({
          content: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è`,
          ephemeral: true,
        });
        return;
      }

      const ask_channel = await modal_result.reply({
        content: ':gear: –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:',
        ephemeral: true,
      });

      const answer_channel = await this.interaction.channel
        ?.awaitMessages({
          filter: (message) => message.author.id === this.interaction.user.id,
          max: 1,
        })
        .catch(() => undefined);
      const answer = answer_channel?.first();

      if (!answer_channel || !answer) return;

      answer.delete();

      let channel = answer.mentions.channels.first();

      if (!channel)
        channel = (await this.interaction.guild?.channels
          .fetch(answer.content)
          .catch(() => undefined)) as Channel | undefined;

      if (!channel) return;

      const key = `${select_value}_channel` as
        | 'buy_message_channel'
        | 'use_message_channel';

      if (!new_value) return;
      this._item[select_value] = new_value;
      this._item[key] = channel?.id;

      modal_result.editReply({
        content: values_text[select_value],
      });

      await this._show_result();
    } catch (err) {
      throw err;
    }
  }
}
